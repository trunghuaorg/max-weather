name: Deploy APP to K8s on AWS

on:
  push:
    branches:
      - dev 
      - main # Trigger action on pushes to main branch
env:
  ENV: dev
  
jobs:

  infra:
    name: Infra Provisioning
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: app.tf  

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6

    - name: Create or Select Terraform Workspace
      run: |
        terraform workspace new ${{ env.ENV }} || terraform workspace select ${{ env.ENV }}

    - name: Terraform Init with Backend Config
      run: terraform init -backend-config=${{ env.ENV }}.conf

    - name: Terraform Plan
      run: terraform plan -var-file=envs/${{ env.ENV }}.tfvars

    - name: Terraform Apply (Auto-Approve)
      run: terraform apply -auto-approve -var-file=envs/${{ env.ENV }}.tfvars
 
  build:
    needs: infra
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image
      run: |
        docker build -f app.api/app.dockerfile  -t trunghua75/max-weather:${{ github.sha }} .
      
    - name: Push Docker image to Docker hub
      run: |
        docker push trunghua75/max-weather:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Update kube config
      run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

    - name: Deploy K8s
      run: |
        echo "Current environment deploy: ${{ env.ENV }}"
        sed -i "s|ENV|${{ env.ENV }}|g" app.api/k8s/deployment.yaml
        sed -i "s|CONTAINER_REGISTRY_BASE_URI|trunghua75/max-weather:${{ github.sha }}|g" app.api/k8s/deployment.yaml
        sed -i "s|ENV|${{ env.ENV }}|g" app.api/k8s/service.yaml
        sed -i "s|ENV|${{ env.ENV }}|g" app.api/k8s/ingress.yaml   

        echo "Viewing deployment details"
        cat app.api/k8s/deployment.yaml
        cat app.api/k8s/service.yaml
        cat app.api/k8s/ingress.yaml

        kubectl apply -f app.api/k8s/deployment.yaml
        kubectl apply -f app.api/k8s/service.yaml
        kubectl apply -f app.api/k8s/ingress.yaml

        echo "Checking deployment status"
        kubectl rollout status deployment/app-api -n max-weather-${{ env.ENV }}
  
  testing:
    needs: deploy
    runs-on: ubuntu-latest

    steps:

      - name: Run multiple shell commands
        run: |
          echo "Process testing"
          URL="https://${{ env.ENV }}-api.odoo.id.vn/v1/ping"
          MAX_RETRIES=5
          DELAY=2
          attempt=0
          sleep 10
          # Function to perform curl and handle retries
          while (( attempt < MAX_RETRIES )); do
              echo "Attempt $((attempt + 1)) to test URL: $URL"
              # Perform the curl request
              curl --fail --silent --show-error "$URL" && {
                  echo "URL responded successfully."
                  exit 0
              }
              ((attempt++))
              if (( attempt < MAX_RETRIES )); then
                  echo "Retrying in $DELAY seconds..."
                  sleep $DELAY
              fi
          done
          # If all attempts fail, throw an error
          echo "Error: URL test failed after $MAX_RETRIES attempts."
          exit 1